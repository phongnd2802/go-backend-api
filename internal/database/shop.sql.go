// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shop.sql

package database

import (
	"context"
)

const activeShopOTP = `-- name: ActiveShopOTP :exec
UPDATE shops SET is_active = 1 WHERE shop_email = ?
`

func (q *Queries) ActiveShopOTP(ctx context.Context, shopEmail string) error {
	_, err := q.db.ExecContext(ctx, activeShopOTP, shopEmail)
	return err
}

const create = `-- name: Create :exec
INSERT INTO shops (id, shop_name, shop_email, shop_password)
VALUES (?, ?, ?, ?)
`

type CreateParams struct {
	ID           string
	ShopName     string
	ShopEmail    string
	ShopPassword string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.ExecContext(ctx, create,
		arg.ID,
		arg.ShopName,
		arg.ShopEmail,
		arg.ShopPassword,
	)
	return err
}

const getShopByEmail = `-- name: GetShopByEmail :one
SELECT id, shop_name, shop_email, shop_password, is_active, verify, created_at, updated_at FROM shops WHERE shop_email = ? LIMIT 1
`

func (q *Queries) GetShopByEmail(ctx context.Context, shopEmail string) (Shop, error) {
	row := q.db.QueryRowContext(ctx, getShopByEmail, shopEmail)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.ShopName,
		&i.ShopEmail,
		&i.ShopPassword,
		&i.IsActive,
		&i.Verify,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE shops SET shop_password = ? WHERE shop_email = ?
`

type UpdatePasswordParams struct {
	ShopPassword string
	ShopEmail    string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.ShopPassword, arg.ShopEmail)
	return err
}
